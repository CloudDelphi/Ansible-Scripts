- name: Create /etc/stunnel/certs
  file: path=/etc/stunnel/certs
        state=directory
        owner=root group=root
        mode=0755

- name: Generate a private key and a X.509 certificate for munin-node
  command: genkeypair.sh x509
                         --pubkey=/etc/stunnel/certs/munin-{{ inventory_hostname_short }}.pem
                         --privkey=/etc/stunnel/certs/munin-{{ inventory_hostname_short }}.key
                         --ou=Munin --cn={{ inventory_hostname }} --dns={{ inventory_hostname }}
                         -t rsa -b 4096 -h sha512
  register: r1
  changed_when: r1.rc == 0
  failed_when: r1.rc > 1
  notify:
    - Restart stunnel@munin-node
  tags:
    - genkey

- name: Fetch Munin X.509 certificate
  # Ensure we don't fetch private data
  become: False
  fetch_cmd: cmd="openssl x509"
             stdin=/etc/stunnel/certs/munin-{{ inventory_hostname_short }}.pem
             dest=certs/munin/{{ inventory_hostname }}.pem
  tags:
    - genkey

- name: Copy munin-master X.509 certificates
  assemble: src=certs/munin regexp="{{ groups['munin-master'] | join('|') }}\.pem$" remote_src=no
            dest=/etc/stunnel/certs/munin-master.pem
            owner=root group=root
            mode=0644
  register: r2
  when: "'munin-master' not in group_names"
  notify:
    - Restart stunnel@munin-node

- name: Configure stunnel
  template: src=etc/stunnel/munin-node.conf.j2
            dest=/etc/stunnel/munin-node.conf
            owner=root group=root
            mode=0644
  register: r3
  when: "'munin-master' not in group_names"
  notify:
    - Restart stunnel@munin-node

- name: Enable stunnel@munin-node
  service: name=stunnel4@munin-node enabled=yes

- name: Start stunnel@munin-node
  service: name=stunnel4@munin-node state=started
  when: not (r1.changed or r2.changed or r3.changed)

- meta: flush_handlers
